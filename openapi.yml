openapi: "3.0.2"
info:
  title: Otter Framework API
  version: "1.0"
  license:
    name: Apache 2.0
    url: https://spdx.org/licenses/Apache-2.0.html
  description: |
    The Otter Framework REST API is for API consumers creating and manipulating room resources for peer to peer video communications.

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:

    ```
    {
      "message": "resource not found"
    }
    ```
servers:
  - url: http://localhost:3000/v1
security: []
components:
  schemas:
    roomObject:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - "closed"
            - "open"
            - "occupied"
            - "full"
        created_at:
          type: string
        updated_at:
          type: string
        unique_name:
          type: string
paths:
  /rooms:
    post:
      summary: Fetch or create a new room
      description: |
        Sending POST request with an optional Room identifier to this endpoint will first check if the Room exists. If it does, the room resource will be returned. If it doesn't exist, a new room resource will be created and returned to the consumer.
      operationId: createNewRoom
      requestBody:
        description: (Optional) Specify the name for the new room. If there is no request body, a new room without a name will be created.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                uniqueName:
                  type: string
                  example: "otter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomObject"
              examples:
                createdRoomWithoutName:
                  summary: room created without a name.
                  value:
                    {
                      id: "34895d14-870c-415a-9559-c85fb6f3ad26",
                      unique_name: "",
                      status: "open",
                      created_at: "Fri, 03 Mar 2023 17:28:11 GMT",
                      updated_at: "Fri, 03 Mar 2023 17:28:11 GMT",
                    }
                createdRoomWithName:
                  summary: room created with a room name `otter`.
                  value:
                    {
                      id: "34895d14-870c-415a-9559-c85fb6f3ad26",
                      unique_name: "otter",
                      status: "open",
                      created_at: "Fri, 03 Mar 2023 17:28:11 GMT",
                      updated_at: "Fri, 03 Mar 2023 17:28:11 GMT",
                    }
        "404":
          description: Not Found
  /rooms/{uniqueIdentifier}:
    get:
      summary: Fetch a Room resource
      description: Fetch a specific Room resource by a unique room identifier (can be `room_id` or `room_name`).
      operationId: getRoomById
      parameters:
        - name: uniqueIdentifier
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomObject"
              examples:
                typicalRoomResource:
                  value:
                    {
                      id: "34895d14-870c-415a-9559-c85fb6f3ad26",
                      unique_name: "otter",
                      status: "open",
                      created_at: "Fri, 03 Mar 2023 17:28:11 GMT",
                      updated_at: "Fri, 03 Mar 2023 17:28:11 GMT",
                    }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  {
                    message: "No room ID or room name specified. Please check your request and try again",
                  }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example: { message: "Room resource doesn't exist" }
  /config:
    get:
      summary: Get WebRTC configurations and credentials
      operationId: getConfig
      responses:
        "200":
          description: OK
