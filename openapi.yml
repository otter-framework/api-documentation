openapi: "3.0.2"
info:
  title: Otter Framework API
  version: "1.0"
  license:
    name: Apache 2.0
    url: https://spdx.org/licenses/Apache-2.0.html
  description: |
    The Otter Framework REST API is for API consumers to create and manipulate peer to peer video communication room resources.

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:

    ```
    {
      "message": "resource not found"
    }
    ```
servers:
  - url: http://localhost:3000/v1
security: []
paths:
  /rooms:
    post:
      summary: Create a new room
      operationId: createNewRoom
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example: { message: "Room was created successfully." }
        "404":
          description: Not Found
  /room/{id}:
    get:
      summary: Fetch a Room resource
      description: Fetch a specific Room resource by roomId
      operationId: getRoomById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  roomId:
                    type: string
                    example: "34895d14-870c-415a-9559-c85fb6f3ad26"
                  status:
                    type: string
                    enum:
                      - "closed"
                      - "open"
                      - "occupied"
                      - "full"
                  createdAt:
                    type: string
                    example: "Fri, 03 Mar 2023 17:28:11 GMT"
                  updatedAt:
                    type: string
                    example: "Fri, 03 Mar 2023 17:28:11 GMT"
                  roomName:
                    type: string
                    example: "otter"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example: { message: "Room resource doesn't exist" }
